'''
하노이의 탑

조건 1. 작은 원반이 위에, 큰 원반이 아래에 위치해야 하는 규칙을 지킨다.
조건 2. 크기가 다른 모든 원반이 첫 번째 기둥에 쌓여 있는 상태로 시작한다.
조건 3. 원반은 1개씩 옮길 수 있다.
'''


def move(no, x, y):
    if no > 1:
        # 6 - x - y -> (보조 기둥)
        # 3개의 기둥 기준으로 기둥 번호의 합이 6(1 + 2 + 3) 이므로 목표 기둥이 어느 위치에 있든 중간 기둥은 (6 - x - y)로 구할 수 있다.
        '''
        위에서부터 차례대로 출력된다.
        
        move(3, 1, 3)
            ㄴ move(2, 1, 2) 
                ㄴ 1. move(1, 1, 3): 원반 1을 1 기둥에서 3 기둥으로 옮깁니다. 
                ㄴ 2. 원반 2를 1기둥에서 2기둥으로 옮깁니다.
                ㄴ 3. move(1, 3, 2): 원반 1을 3 기둥에서 2 기둥으로 옮깁니다.
            
            ㄴ 4. 원반 3을 1 기둥에서 3기둥으로 옮깁니다.
            
            // 이 시점에서 가장 큰 원반은 3에 있고, 나머지 작은 원반은 정렬되어 보조 기둥에 쌓여있게 된다.
            // 이제 보조 기둥에 있는 작은 원반을 3으로 옮기기 만하면 된다. (보조 기둥에 있는게 목표 기둥으로 가야하므로 6 - x - y(보조) -> y(목표))
            
            ㄴ move(2, 2, 3)
                ㄴ 5. move(1, 2, 1): 원반 1를 2기둥에서 1기둥으로 옮깁니다.
                ㄴ 6. 원반 2를 2기둥에서 3기둥으로 옮깁니다.
                ㄴ 7. move(1, 1, 3): 원반 1를 1기둥에서 3기둥으로 옮깁니다.
        '''
        move(no - 1, x, 6 - x - y)  # 원판 하나(no - 1)를 빼서 보조 기둥에 옮기는 동작(x -> 6 - x - y)이라고 생각하자.

    # no가 1이하인 경우는 오로지 출력문만 실행한다.
    print(f'원반 [{no}]을(를) {x}기둥에서 {y} 기둥으로 옮깁니다.')

    if no > 1:
        move(no - 1, 6 - x - y, y)  # 원판 하나(no - 1)를 빼서 보조 기둥에 옮기는 동작(6 - x - y -> ㅛ)이라고 생각하자.


n = int(input('원반의 갯수를 입력해주세요.: '))

move(n, 1, 3)  # n개의 원반을 1번 기둥에서 3번 기둥으로 옮긴다.
